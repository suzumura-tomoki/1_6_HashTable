
/**********************************************************************************//**
	@file           ManualTest_Stack.cpp
	@brief          スタックの手動テストを行います
*//***********************************************************************************/

#include "pch.h"
#include"ManualTest_Stack.h"
#include"..\メインプロジェクト\Stack.h"

/**********************************************************************************//**
	@brief		スタックがコンテストの場合の要素数の取得テスト
	@details	ID:スタック-7\n
				コンテストのスタックで要素数の取得を行った場合の戻り値を確認しています。\n
				コンパイルエラーとならなければ成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenConst) {
#ifdef STACK_GET_SIZE_WHEN_CONST
	const Stack<int> stack;

	EXPECT_EQ(0, stack.GetSize());
#else
	SUCCEED();
#endif
}

/**********************************************************************************//**
	@brief		スタックがコンテストの場合のプッシュテスト
	@details	ID:スタック-10\n
				スタックがコンテストである場合にプッシュを行った際の挙動を確認しています。\n
				コンパイルエラーになれば成功です。\n
*//***********************************************************************************/
TEST(TestStackPush, WhenConst) {

	//#define PUSH_WHEN_CONST

#ifdef PUSH_WHEN_CONST

	const Stack<int> stack;
	stack.Push(0);//ここでエラー

#else
	SUCCEED();
#endif 
}

/**********************************************************************************//**
	@brief		スタックがコンテストの場合のポップテスト
	@details	ID:スタック-14\n
				スタックがコンテストである場合にポップを行った際の挙動を確認しています。\n
				コンパイルエラーになれば成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, WhenConst) {

	//#define POP_WHEN_CONST

#ifdef POP_WHEN_CONST

	const Stack<int> stack;
	int n;

	stack.Pop(n);//ここでエラー

#else
	SUCCEED();
#endif 
}