
/**********************************************************************************//**
	@file           test.cpp
	@brief          スタックのテストを行います
*//***********************************************************************************/

#include "pch.h"
#include"..\メインプロジェクト\Stack.h"

#pragma region ================================= 要素数の取得 =====================================

/**********************************************************************************//**
	@brief		スタックが空である場合の要素数の取得テスト
	@details	ID:スタック-0\n
				スタックが空である場合の戻り値を確認しています。\n
				要素数が0であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenEmpty) {
	Stack<int> stack;
	EXPECT_EQ(0, stack.GetSize());
}

/**********************************************************************************//**
	@brief		要素をプッシュした後の要素数の取得テスト
	@details	ID:スタック-1\n
				空のスタックに要素をプッシュした後に要素数の取得を行った場合の戻り値を確認しています。\n
				要素数が1であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenAfterPush) {
	Stack<int> stack;
	stack.Push(0);
	EXPECT_EQ(1, stack.GetSize());
}

/**********************************************************************************//**
	@brief		要素をポップした後の要素数の取得テスト
	@details	ID:スタック-2\n
				スタックに要素が1つある場合に、ポップした後に要素数の取得を行った場合の戻り値を確認しています。\n
				要素数が0であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenAfterPop) {
	Stack<int> stack;

	//プッシュ
	stack.Push(0);
	EXPECT_EQ(1, stack.GetSize());

	//ポップ
	int n;
	stack.Pop(n);
	EXPECT_EQ(0, stack.GetSize());
}

/**********************************************************************************//**
	@brief		要素のプッシュに失敗した場合の要素数の取得テスト
	@details	ID:スタック-3\n
				要素のプッシュに失敗するのはメモリの確保に失敗した場合のみなのでテストを行いません
*//***********************************************************************************/
TEST(TestStackGetSize, WhenAfterPushFailed) {
	//要素のプッシュに失敗するのはメモリの確保に失敗した場合のみなのでテストを行いません
	//Stack<int> stack;
	//stack.Push(0);
	//EXPECT_EQ(0, stack.GetSize());
}

/**********************************************************************************//**
	@brief		プッシュを2回行った場合の要素数の取得テスト
	@details	ID:スタック-4\n
				空のスタックでプッシュを2回行った後に要素数の取得を行った場合の戻り値を確認しています。\n
				要素数が2であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenAfterPushTwice) {
	Stack<int> stack;
	stack.Push(0);
	stack.Push(0);
	EXPECT_EQ(2, stack.GetSize());
}

/**********************************************************************************//**
	@brief		プッシュを2回行った後、１回ポップした場合の要素数の取得テスト
	@details	ID:スタック-5\n
				空のスタックでプッシュを2回行い、１回ポップした後に要素数の取得を行った場合の戻り値を確認しています。\n
				要素数が1であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenAfterPushTwiceAndPopOnce) {
	Stack<int> stack;

	stack.Push(0);
	stack.Push(0);

	int n;
	stack.Pop(n);

	EXPECT_EQ(1, stack.GetSize());
}

/**********************************************************************************//**
	@brief		空のスタックでポップを行った後の要素数の取得テスト
	@details	ID:スタック-6\n
				空のスタックでポップを行った後に要素数の取得を行った場合の戻り値を確認しています。\n
				要素数が0であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackGetSize, WhenEmptyAfterPop) {
	Stack<int> stack;

	int n;

	EXPECT_FALSE(stack.Pop(n));

	EXPECT_EQ(0, stack.GetSize());
}

/**********************************************************************************//**
	@brief		スタックがコンテストの場合の要素数の取得テスト
	@details	ID:スタック-7\n
				自動テストを行いません
*//***********************************************************************************/


#pragma endregion ================================= 要素数の取得 =====================================

#pragma region =================================== プッシュ =======================================

/**********************************************************************************//**
	@brief		スタックが空である場合のプッシュテスト
	@details	ID:スタック-8\n
				スタックが空である場合にプッシュを行った際の挙動を確認しています。\n
				戻り値がtrueであり、要素数が1であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackPush, WhenEmpty) {
	Stack<int> stack;

	EXPECT_TRUE(stack.Push(0));
	EXPECT_EQ(1, stack.GetSize());
}

/**********************************************************************************//**
	@brief		スタックに複数の要素がある場合のプッシュテスト
	@details	ID:スタック-9\n
				スタックに複数の要素がある場合にプッシュを行った際の挙動を確認しています。\n
				戻り値がtrueであり、要素数が1増えていると成功です。\n
*//***********************************************************************************/
TEST(TestStackPush, WhenStackHasMultipleData) {
	Stack<int> stack;

	for (int i = 1; i < 5; i++) {
		EXPECT_TRUE(stack.Push(i));
		EXPECT_EQ(i, stack.GetSize());
	}
}

/**********************************************************************************//**
	@brief		スタックがコンテストの場合のプッシュテスト
	@details	ID:スタック-10\n
				自動テストを行いません
*//***********************************************************************************/

#pragma endregion =================================== プッシュ =======================================

#pragma region =================================== ポップ =======================================

/**********************************************************************************//**
	@brief		スタックが空である場合のポップテスト
	@details	ID:スタック-11\n
				スタックが空である場合にポップを行った際の挙動を確認しています。\n
				戻り値がfalseであり、要素数が0であれば成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, WhenEmpty) {
	Stack<int> stack;
	int n;
	EXPECT_FALSE(stack.Pop(n));
	EXPECT_EQ(0, stack.GetSize());
}

/**********************************************************************************//**
	@brief		スタックに複数の要素がある場合のポップテスト
	@details	ID:スタック-12\n
				スタックに複数の要素がある場合にポップを１回行った際の挙動を確認しています。\n
				戻り値がtrueであり、要素数が1減っていると成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, PopOnceWhenStackHasMultipleData) {
	Stack<int> stack;
	const int dataNum = 4;

	//確認用配列
	int pushNums[dataNum];

	//複数回プッシュ
	for (int i = 0; i < dataNum; i++) {
		stack.Push(i);
		pushNums[i] = i;
	}

	//ポップしてデータを確認
	int popNum;
	EXPECT_TRUE(stack.Pop(popNum));
	EXPECT_EQ(pushNums[dataNum - 1], popNum);
	EXPECT_EQ(dataNum - 1, stack.GetSize());
}

/**********************************************************************************//**
	@brief		スタックに複数の要素がある場合のポップテスト
	@details	ID:スタック-13\n
				スタックに複数の要素がある場合にポップを複数回行った際の挙動を確認しています。\n
				戻り値がtrueであり、要素数が1減っていると成功です。\n
*//***********************************************************************************/
TEST(TestStackPop, WhenStackHasMultipleData) {
	Stack<int> stack;
	const int dataNum = 4;

	//確認用配列
	int pushNums[dataNum];
	int popNums[dataNum];

	//複数回プッシュ
	for (int i = 0; i < dataNum; i++) {
		stack.Push(i);
		pushNums[i] = i;
	}

	//ポップしてデータを確認
	for (int i = 0; i < dataNum; i++) {
		EXPECT_TRUE(stack.Pop(popNums[i]));
		EXPECT_EQ(pushNums[dataNum - 1 - i], popNums[i]);
		EXPECT_EQ(dataNum - 1 - i, stack.GetSize());
	}

}

/**********************************************************************************//**
	@brief		スタックがコンテストの場合のポップテスト
	@details	ID:スタック-14\n
				自動テストを行いません
*//***********************************************************************************/

#pragma endregion =================================== ポップ =======================================